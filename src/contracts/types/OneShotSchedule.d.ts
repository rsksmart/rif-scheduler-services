/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Executed = ContractEventLog<{
  id: string;
  success: boolean;
  result: string;
  0: string;
  1: boolean;
  2: string;
}>;
export type ExecutionCancelled = ContractEventLog<{
  id: string;
  0: string;
}>;
export type ExecutionPurchased = ContractEventLog<{
  requestor: string;
  plan: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type ExecutionRequested = ContractEventLog<{
  id: string;
  0: string;
}>;
export type PlanAdded = ContractEventLog<{
  index: string;
  price: string;
  token: string;
  window: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type PlanRemoved = ContractEventLog<{
  index: string;
  0: string;
}>;

export interface OneShotSchedule extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OneShotSchedule;
  clone(): OneShotSchedule;
  methods: {
    payee(): NonPayableTransactionObject<string>;

    plans(
      arg0: number | string | BN
    ): NonPayableTransactionObject<{
      pricePerExecution: string;
      window: string;
      token: string;
      active: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;

    remainingExecutions(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    serviceProvider(): NonPayableTransactionObject<string>;

    initialize(
      serviceProvider_: string,
      payee_: string
    ): NonPayableTransactionObject<void>;

    addPlan(
      price: number | string | BN,
      window: number | string | BN,
      token: string
    ): NonPayableTransactionObject<void>;

    removePlan(plan: number | string | BN): NonPayableTransactionObject<void>;

    setPayee(payee_: string): NonPayableTransactionObject<void>;

    purchase(
      plan: number | string | BN,
      quantity: number | string | BN
    ): NonPayableTransactionObject<void>;

    tokenFallback(
      from: string,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<boolean>;

    getState(id: string | number[]): NonPayableTransactionObject<string>;

    hash(
      execution: [
        string,
        number | string | BN,
        string,
        string | number[],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    schedule(
      plan: number | string | BN,
      to: string,
      data: string | number[],
      gas: number | string | BN,
      timestamp: number | string | BN
    ): PayableTransactionObject<void>;

    getSchedule(
      id: string | number[]
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    cancelScheduling(id: string | number[]): NonPayableTransactionObject<void>;

    execute(id: string | number[]): NonPayableTransactionObject<void>;
  };
  events: {
    Executed(cb?: Callback<Executed>): EventEmitter;
    Executed(options?: EventOptions, cb?: Callback<Executed>): EventEmitter;

    ExecutionCancelled(cb?: Callback<ExecutionCancelled>): EventEmitter;
    ExecutionCancelled(
      options?: EventOptions,
      cb?: Callback<ExecutionCancelled>
    ): EventEmitter;

    ExecutionPurchased(cb?: Callback<ExecutionPurchased>): EventEmitter;
    ExecutionPurchased(
      options?: EventOptions,
      cb?: Callback<ExecutionPurchased>
    ): EventEmitter;

    ExecutionRequested(cb?: Callback<ExecutionRequested>): EventEmitter;
    ExecutionRequested(
      options?: EventOptions,
      cb?: Callback<ExecutionRequested>
    ): EventEmitter;

    PlanAdded(cb?: Callback<PlanAdded>): EventEmitter;
    PlanAdded(options?: EventOptions, cb?: Callback<PlanAdded>): EventEmitter;

    PlanRemoved(cb?: Callback<PlanRemoved>): EventEmitter;
    PlanRemoved(
      options?: EventOptions,
      cb?: Callback<PlanRemoved>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Executed", cb: Callback<Executed>): void;
  once(event: "Executed", options: EventOptions, cb: Callback<Executed>): void;

  once(event: "ExecutionCancelled", cb: Callback<ExecutionCancelled>): void;
  once(
    event: "ExecutionCancelled",
    options: EventOptions,
    cb: Callback<ExecutionCancelled>
  ): void;

  once(event: "ExecutionPurchased", cb: Callback<ExecutionPurchased>): void;
  once(
    event: "ExecutionPurchased",
    options: EventOptions,
    cb: Callback<ExecutionPurchased>
  ): void;

  once(event: "ExecutionRequested", cb: Callback<ExecutionRequested>): void;
  once(
    event: "ExecutionRequested",
    options: EventOptions,
    cb: Callback<ExecutionRequested>
  ): void;

  once(event: "PlanAdded", cb: Callback<PlanAdded>): void;
  once(
    event: "PlanAdded",
    options: EventOptions,
    cb: Callback<PlanAdded>
  ): void;

  once(event: "PlanRemoved", cb: Callback<PlanRemoved>): void;
  once(
    event: "PlanRemoved",
    options: EventOptions,
    cb: Callback<PlanRemoved>
  ): void;
}
